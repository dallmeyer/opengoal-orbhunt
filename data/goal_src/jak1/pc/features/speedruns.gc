;;-*-Lisp-*-
(in-package goal)

(define-extern speedrun-practice-spawn (function none)) ;; defined at end of this file
(define-extern speedrun-practice-store-temp-checkpoint (function none)) ;; defined at end of this file
(define *practice-spawn-post-init* (the-as (function none) #f))

(define *last-real-continue-point* (the-as continue-point #f))
(defun generic-post-init ()
  (when *last-real-continue-point*
    (set! (-> *game-info* current-continue) *last-real-continue-point*)
    )
  (none)
  )

(define *speedrun-info* (new 'static 'speedrun-info-jak1 :should-display? #t :needs-post-blackout-setup? #f))

(defun is-speedrun-category? ((category symbol))
  (and (-> *pc-settings* speedrunner-mode?)
        (name= category (enum->string speedrun-category (-> *speedrun-info* category)))
        )
  )

(defun start-speedrun ((category speedrun-category))
  ;; randomize game id so the autosplitter knows to restart
  (update-autosplit-jak1-new-game)
  ;; disable hints
  (set! (-> *setting-control* default play-hints) #f)
  ;; turn on speedrun verification display and flip flag for setting up speedrun after initialize!
  (set! (-> *speedrun-info* should-display?) #t)
  (set! (-> *speedrun-info* needs-post-blackout-setup?) #t)
  ;; start new game with specified checkpoint, if any (otherwise we're resetting current category)
  (if category
    (set! (-> *speedrun-info* category) category)
    )
  (case (-> *speedrun-info* category)
    (((speedrun-category full-game))
      ;; spawn at the warp gate checkpoint
      (initialize! *game-info* 'game (the-as game-save #f) "game-start")
      )
    (((speedrun-category il-training))
      ;; spawn at the warp gate checkpoint
      (initialize! *game-info* 'game (the-as game-save #f) "game-start")
      )
    (((speedrun-category il-village1))
      ;; spawn at the green sage hut warp gate
      (initialize! *game-info* 'game (the-as game-save #f) "village1-warp")
      )
    (((speedrun-category il-beach))
      ;; spawn at beach
      (initialize! *game-info* 'game (the-as game-save #f) "beach-start")
      )
    (((speedrun-category il-jungle))
      ;; spawn at start of FJ
      (initialize! *game-info* 'game (the-as game-save #f) "jungle-start")
      )
    (((speedrun-category il-misty))
      ;; spawn at start of misty     
      (initialize! *game-info* 'game (the-as game-save #f) "misty-start")
      )
    (((speedrun-category il-firecanyon))
      ;; spawn at start of fire canyon
      (initialize! *game-info* 'game (the-as game-save #f) "firecanyon-start")
      )
    (((speedrun-category il-village2))
      ;; spawn at rock village start
      (initialize! *game-info* 'game (the-as game-save #f) "village2-start")
      )
    (((speedrun-category il-sunken))
      ;; spawn at start of LPC
      (initialize! *game-info* 'game (the-as game-save #f) "sunken-start")
      )
    (((speedrun-category il-swamp))
      ;; spawn at start of boggy
      (initialize! *game-info* 'game (the-as game-save #f) "swamp-start")
      )
    (((speedrun-category il-rolling))
      ;; spawn at start of basin
      (initialize! *game-info* 'game (the-as game-save #f) "rolling-start")
      )
    (((speedrun-category il-ogre))
      ;; spawn before klaww
      (initialize! *game-info* 'game (the-as game-save #f) "ogre-start")
      )
    (((speedrun-category il-village3))
      ;; spawn at start of volcanic crater
      (initialize! *game-info* 'game (the-as game-save #f) "village3-start")
      )
    (((speedrun-category il-snow))
      ;; spawn at start of snowy
      (initialize! *game-info* 'game (the-as game-save #f) "snow-start")
      )
    (((speedrun-category il-cave))
      ;; spawn at start of spider cave
      (initialize! *game-info* 'game (the-as game-save #f) "maincave-start")
      )
    (((speedrun-category il-lavatube))
      ;; spawn at start of lava tube
      (initialize! *game-info* 'game (the-as game-save #f) "lavatube-start")
      )
    (((speedrun-category il-citadel))
      ;; spawn outside first citadel door
      (initialize! *game-info* 'game (the-as game-save #f) "citadel-entrance")
      )
    )
  ;; ensure `force actors` is not enabled
  (set! (-> *pc-settings* force-actors?) #f)
  ;; force FPS to `60`
  (set-frame-rate! *pc-settings* 60)
  ;; enable auto saving by default
  (set! (-> *setting-control* default auto-save) #t)
  (none)
  )
  
(defun setup-speedrun-post-blackout ()
  (when (and (-> *speedrun-info* needs-post-blackout-setup?) (>= (-> *display* base-frame-counter) (-> *game-info* blackout-time)))
    (set! (-> *speedrun-info* needs-post-blackout-setup?) #f)
    (case (-> *speedrun-info* category)
      (((speedrun-category full-game))
        ;; skip intro cutscene
        (close-specific-task! (game-task intro) (task-status need-resolution))
        )
      (((speedrun-category il-training))
        ;; skip intro cutscene
        (close-specific-task! (game-task intro) (task-status need-resolution))
        (mark-text-as-seen *game-info* (game-text-id training-level-name))
        )
      (((speedrun-category il-village1))
        ;; give enough orbs to buy all cells 120+120+90+90=420
        (set! (-> *game-info* money-total) 420.0)
        (set! (-> *game-info* money) 420.0)
        (mark-text-as-seen *game-info* (game-text-id village1-level-name))
        )
      (((speedrun-category il-beach))
        ;; unlock blue eco vent
        (close-specific-task! (game-task jungle-eggtop) (task-status need-resolution))
        (send-event *target* 'get-pickup (pickup-type fuel-cell) (the float (game-task jungle-eggtop)))
        (mark-text-as-seen *game-info* (game-text-id beach-level-name))
        )
      (((speedrun-category il-jungle))
        (mark-text-as-seen *game-info* (game-text-id jungle-level-name))
        )
      (((speedrun-category il-misty))
        ;; unlock fisherman's boat
        (close-specific-task! (game-task jungle-fishgame) (task-status need-resolution))
        (send-event *target* 'get-pickup (pickup-type fuel-cell) (the float (game-task jungle-fishgame)))
        (mark-text-as-seen *game-info* (game-text-id misty-level-name))
        )
      (((speedrun-category il-firecanyon))
        ;; skip keira intro cutscene
        (close-specific-task! (game-task firecanyon-assistant) (task-status need-reward-speech))
        ;; unlock blue eco vent
        (close-specific-task! (game-task jungle-eggtop) (task-status need-resolution))
        (send-event *target* 'get-pickup (pickup-type fuel-cell) (the float (game-task jungle-eggtop)))
        (mark-text-as-seen *game-info* (game-text-id firecanyon-level-name))
        )
      (((speedrun-category il-village2))
        ;; give enough orbs to buy all cells 120+120+90+90+90=510
        (set! (-> *game-info* money-total) 510.0)
        (set! (-> *game-info* money) 510.0)
        )
      (((speedrun-category il-sunken))
        (mark-text-as-seen *game-info* (game-text-id sunken-level-name))
        )
      (((speedrun-category il-swamp))
        ;; unlock flutflut
        (close-specific-task! (game-task beach-flutflut) (task-status need-resolution))
        (close-specific-task! (game-task village2-levitator) (task-status need-introduction))
        (send-event *target* 'get-pickup (pickup-type fuel-cell) (the float (game-task beach-flutflut)))
        (mark-text-as-seen *game-info* (game-text-id swamp-level-name))
        )
      (((speedrun-category il-rolling))
        ;; unlock zoomer
        (close-specific-task! (game-task village2-levitator) (task-status need-introduction))
        ;; unlock DMG
        (close-specific-task! (game-task rolling-race) (task-status need-introduction))
        ;; unlock moles
        (close-specific-task! (game-task rolling-moles) (task-status need-introduction))
        (mark-text-as-seen *game-info* (game-text-id rolling-level-name))
        )
      (((speedrun-category il-ogre))
        ;; skip klaww intro cutscene
        (close-specific-task! (game-task ogre-boss) (task-status need-hint))
        ;; unlock yellow eco vent
        (close-specific-task! (game-task snow-eggtop) (task-status need-resolution))
        (send-event *target* 'get-pickup (pickup-type fuel-cell) (the float (game-task snow-eggtop)))
        (mark-text-as-seen *game-info* (game-text-id ogre-level-name))
        )
      (((speedrun-category il-village3))
        ;; give enough orbs to buy all cells 120+120+90+90+90+90=600
        (set! (-> *game-info* money-total) 600.0)
        (set! (-> *game-info* money) 600.0)
        (mark-text-as-seen *game-info* (game-text-id village3-level-name))
        )
      (((speedrun-category il-snow))
        ;; unlock flutflut
        (close-specific-task! (game-task beach-flutflut) (task-status need-resolution))
        (send-event *target* 'get-pickup (pickup-type fuel-cell) (the float (game-task beach-flutflut)))
        ;; unlock gondola
        (close-specific-task! (game-task village3-button) (task-status need-introduction))
        (mark-text-as-seen *game-info* (game-text-id snow-level-name))
        )
      (((speedrun-category il-cave))
        ;; unlock yellow eco vent
        (close-specific-task! (game-task snow-eggtop) (task-status need-resolution))
        (send-event *target* 'get-pickup (pickup-type fuel-cell) (the float (game-task snow-eggtop)))
        (mark-text-as-seen *game-info* (game-text-id cave-level-name))
        )
      (((speedrun-category il-lavatube))
        ;; skip keira intro cutscene
        (close-specific-task! (game-task lavatube-start) (task-status need-reward-speech))
        (mark-text-as-seen *game-info* (game-text-id lavatube-level-name))
        )
      (((speedrun-category il-citadel))
        ;; remove invisible wall
        (close-specific-task! (game-task lavatube-end) (task-status need-resolution))
        (send-event *target* 'get-pickup (pickup-type fuel-cell) (the float (game-task lavatube-end)))
        ;; unlock door
        (close-specific-task! (game-task village4-button) (task-status need-reward-speech))
        (mark-text-as-seen *game-info* (game-text-id citadel-level-name))
        )
      )
      ;; reset speedrun display (gets hidden on first collectable pickup)
      (set! (-> *speedrun-info* should-display?) #t)
      ;; reset actors to ensure any above changes take effect
      (reset-actors 'life)
      ;; autosave any changes back to file
      (auto-save-command 'auto-save 0 0 *default-pool*)
    )
  (none)
  )

(defun get-on-flutflut ()
  (generic-post-init)
  (case (-> *target* state)
    ((target-flut-stance target-racing)
      (send-event *target* 'end-mode)
      )
    (else
      (send-event *target* 'change-mode 'flut #f)
      )
    )
  (none)
  )

(defun get-on-zoomer ()
  (generic-post-init)
  (case (-> *target* state)
    ((target-flut-stance target-racing)
      (send-event *target* 'end-mode)
      )
    (else
      (send-event *target* 'change-mode 'racing #f)
      )
    )
  (none)
  )

(define *baby-mode-orb-dist* (the-as float #f))
(defun draw-baby-mode ()
  "Draw baby-mode counter in the bottom left corner"
  (when (and (-> *setting-control* current allow-pause) (-> *pc-settings* baby-mode?))
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf))
                                      (bucket-id debug-no-zbuf))
      (if (= *baby-mode-orb-dist* #f)
        (draw-string-xy (string-format "Closest Orb: N/A ~%Crybaby Count: ~D"
                                      (-> *pc-settings* baby-mode-count))
                        buf 0 200 (font-color flat-yellow) (font-flags shadow kerning))
        (draw-string-xy (string-format "Closest Orb: ~Mm ~%Crybaby Count: ~D"
                                      *baby-mode-orb-dist*
                                      (-> *pc-settings* baby-mode-count))
                        buf 0 200 (font-color flat-yellow) (font-flags shadow kerning))
        )
      )
    )
  (none)
  )


(defun hide-speedrun-display ()
  (set! (-> *speedrun-info* should-display?) #f)
  (none)
  )

(defun speedrun-start-full-game-run ()
  ;; start a full game speedrun, save file is already selected so don't default to first slot
  (start-speedrun (speedrun-category full-game))
  (none))

(defun speedrun-draw-settings ()
  "Draw speedrun related settings in the bottom left corner"
  (when (and (-> *pc-settings* speedrunner-mode?)
             (not (-> *pc-settings* baby-mode?))
             (not (paused?))
             (-> *speedrun-info* should-display?))
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf))
                                      (bucket-id debug-no-zbuf))
      (draw-string-xy (string-format "OpenGOAL Version: ~S ~%Speedrun mode: ~A ~%Category: ~S ~%Cutscene Skips ~A"
                                     *pc-settings-built-sha*
                                     (-> *pc-settings* speedrunner-mode?)
                                     (enum->string speedrun-category (-> *speedrun-info* category))
                                     (-> *pc-settings* skip-movies?))
                      buf 0 (- 220 (* 8 4)) (font-color flat-yellow) (font-flags shadow kerning))))
  (none))

(defun speedrun-mode-update ()
  "A per frame update for speedrunning related stuff"
  (when (-> *pc-settings* speedrunner-mode?)
    ;; Update auto-splitter
    (update-autosplit-info-jak1)
    ;; Draw info to the screen
    (draw-baby-mode)
    
    (speedrun-draw-settings)
    ;;Disable any active cheats
    (set! (-> *pc-settings* cheats) (the-as pc-cheats #x0))
    ;; Run after-blackout speedrun setup (if needed)
    (setup-speedrun-post-blackout)
    )

  (when (-> *pc-settings* baby-mode?)
    ;; call post-init function
    (when (and *practice-spawn-post-init*
                *target*
                (-> *setting-control* current allow-pause)
                (>= (- (-> *display* base-frame-counter) (-> *game-info* blackout-time)) (seconds 0.1))
                )
      (*practice-spawn-post-init*)
      (set! *practice-spawn-post-init* #f)
      )

    (when (cpad-hold? 0 l2)
      ;; Check for fast reset combo
      (when (cpad-pressed? 0 up)
        (format #t "player triggered reset combo~%")
        (speedrun-practice-spawn)
        )
      
      ;; Check for temp checkpoint combo
      (when (cpad-pressed? 0 down)
        (format #t "player triggered temp checkpoint combo~%")
        (speedrun-practice-store-temp-checkpoint)
        )
      )
    )
  (none))

(defun speedrun-reset-common-settings ()
  ;; disable hints (this seems to be overriden by your slot 1 save though)
  (set! (-> *setting-control* default play-hints) #f)
  ;; ensure `force actors` is not enabled
  (set! (-> *pc-settings* force-actors?) #f)
  ;; force FPS to `60`
  (set-frame-rate! *pc-settings* 60)
  ;; skip intro cutscene
  (close-specific-task! (game-task intro) (task-status need-resolution))
  (none)
  )

(defun speedrun-start-run ()
  ;; randomize game id so the autosplitter knows to restart
  (update-autosplit-jak1-new-game)
  ;; spawn at the warp gate checkpoint
  (initialize! *game-info* 'game (the-as game-save #f) "game-start")
  (speedrun-reset-common-settings)
  ;; enable auto saving by default
  (set! (-> *setting-control* default auto-save) #t)
  (none)
  )

(define *tmp-continue-point* (new 'static 'continue-point
                             :name "tmp"
                             :level #f
                             :trans (new 'static 'vector :w 1.0)
                             :quat (new 'static 'quaternion :w 1.0)
                             :camera-trans (new 'static 'vector :w 1.0)
                             :camera-rot (new 'static 'array float 9)
                             :load-commands '()
                             :vis-nick #f
                             :lev0 #f
                             :disp0 #f
                             :lev1 #f
                             :disp1 #f
                             )
    )
(define *tmp-flut?* #f)
(define *tmp-zoomer?* #f)

(defun speedrun-practice-temp-checkpoint ()
  (when (-> *tmp-continue-point* level)
    (+! (-> *pc-settings* baby-mode-count) 1) ;; increment baby-mode-counter
    (cond
      (*tmp-flut?* (set! *practice-spawn-post-init* get-on-flutflut))
      (*tmp-zoomer?* (set! *practice-spawn-post-init* get-on-zoomer))
      (else (set! *practice-spawn-post-init* generic-post-init))
      )
    ;; commented out to prevent malding 
    ;; (if (cpad-hold? 0 r2)  ;; fully reset game if r2 held too
    ;;   (initialize! *game-info* 'game (the-as game-save #f) "default")
    ;;   )
    (when (not (string= (-> *game-info* current-continue name) "tmp"))
      (set! *last-real-continue-point* (-> *game-info* current-continue))
      )
    (set! (-> *game-info* current-continue) *tmp-continue-point*)
    (initialize! *game-info* 'dead (the-as game-save #f) (the-as string #f))
    (speedrun-reset-common-settings)
    )
  (none)
  )

(defun continue-point-copy! ((dst continue-point) (src continue-point))
  (set! (-> dst level) (-> src level))
  (set! (-> dst quat y) 0.0)
  (set! (-> dst quat w) 1.0)
  (set! (-> dst load-commands) (-> src load-commands))
  (set! (-> dst vis-nick) (-> src vis-nick))
  (when (-> *level* level0)
    (set! (-> dst lev0) (-> *level* level0 name))
    (set! (-> dst disp0) 'display)
    )
  (when (-> *level* level1)
    (set! (-> dst lev1) (-> *level* level1 name))
    (set! (-> dst disp1) 'display)
    )
  (none)
  )

(defun camera-rot-copy! ((dst continue-point) (src matrix))
  (set! (-> dst camera-rot 0) (-> src vector 0 x))
  (set! (-> dst camera-rot 1) (-> src vector 0 y))
  (set! (-> dst camera-rot 2) (-> src vector 0 z))
  (set! (-> dst camera-rot 3) (-> src vector 1 x))
  (set! (-> dst camera-rot 4) (-> src vector 1 y))
  (set! (-> dst camera-rot 5) (-> src vector 1 z))
  (set! (-> dst camera-rot 6) (-> src vector 2 x))
  (set! (-> dst camera-rot 7) (-> src vector 2 y))
  (set! (-> dst camera-rot 8) (-> src vector 2 z))
  (none)
  )

(defun speedrun-practice-store-temp-checkpoint ()
  (case (-> *target* state)
    ;; only store temp checkpoint if in one of these states
    ((target-stance target-wade-stance target-swim-stance target-flut-stance target-racing)
      ;; assume current continue is good enough for the current location
      (continue-point-copy! *tmp-continue-point* (-> *game-info* current-continue))
      (vector-copy! (-> *tmp-continue-point* trans) (-> *target* root trans))
      (quaternion-copy! (-> *tmp-continue-point* quat) (-> *target* control unknown-quaternion00))
      (vector-copy! (-> *tmp-continue-point* camera-trans) (-> *camera-combiner* trans))
      (camera-rot-copy! *tmp-continue-point* (-> *camera-combiner* inv-camera-rot))

      (set! *tmp-flut?* #f)
      (set! *tmp-zoomer?* #f)
      (case (-> *target* state)
        ((target-flut-stance)
          (set! *tmp-flut?* #t)
          )
        ((target-racing)
          (set! *tmp-zoomer?* #t)
          )
        )
      (sound-play "select-menu")
      )
    )
  (none)
  )


(defun speedrun-practice-spawn ()
  ;; enable speedrunner mode
  (set! (-> *pc-settings* speedrunner-mode?) #t)
  ;; randomize game id so the autosplitter knows to restart
  (update-autosplit-jak1-new-game)

  ;; reset any previous post-target-init callback
  (set! *practice-spawn-post-init* #f)

  (speedrun-practice-temp-checkpoint)
      
  (none)
  )