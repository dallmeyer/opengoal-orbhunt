;;-*-Lisp-*-
(in-package goal)

(define-extern speedrun-practice-spawn (function none)) ;; defined at end of this file
(define-extern speedrun-practice-store-temp-checkpoint (function none)) ;; defined at end of this file
(define *practice-spawn-post-init* (the-as (function none) #f))

(define *last-real-continue-point* (the-as continue-point #f))
(defun generic-post-init ()
  (when *last-real-continue-point*
    (set! (-> *game-info* current-continue) *last-real-continue-point*)
    )
  (none)
  )

(defun get-on-flutflut ()
  (generic-post-init)
  (case (-> *target* state)
    ((target-flut-stance target-racing)
      (send-event *target* 'end-mode)
      )
    (else
      (send-event *target* 'change-mode 'flut #f)
      )
    )
  (none)
  )

(defun get-on-zoomer ()
  (generic-post-init)
  (case (-> *target* state)
    ((target-flut-stance target-racing)
      (send-event *target* 'end-mode)
      )
    (else
      (send-event *target* 'change-mode 'racing #f)
      )
    )
  (none)
  )

;; (defun speedrun-draw-settings ()
;;   "Draw speedrun related settings in the bottom left corner"
;;   (when (and (-> *pc-settings* speedrunner-mode?)
;;              (< (-> *autosplit-info-jak1* num-power-cells) 1))
;;     (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf))
;;                                       (bucket-id debug-no-zbuf))
;;       (draw-string-xy (string-format "OpenGOAL Version: ~S ~%Speedrun mode: ~A ~%Cutscene Skips ~A"
;;                                      *pc-settings-built-sha*
;;                                      (-> *pc-settings* speedrunner-mode?)
;;                                      (-> *pc-settings* cutscene-skips?))
;;                       buf 0 (- 224 (* 8 4)) (font-color flat-yellow) (font-flags shadow kerning))))
;;   (none)
;;   )

(defun draw-baby-mode ()
  "Draw baby-mode counter in the bottom left corner"
  (when (and (-> *setting-control* current allow-pause) (-> *pc-settings* baby-mode?))
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf))
                                      (bucket-id debug-no-zbuf))
      (draw-string-xy (string-format "Crybaby Count: ~D"
                                     (-> *pc-settings* baby-mode-count))
                      buf 0 210 (font-color flat-yellow) (font-flags shadow kerning))))
  (none)
  )


(defun speedrun-mode-update ()
  "A per frame update for speedrunning related stuff"
  (when (-> *pc-settings* speedrunner-mode?)
    ;; Update auto-splitter
    (update-autosplit-info-jak1)
    ;; Draw info to the screen
    (draw-baby-mode)
    ;; (speedrun-draw-settings)
    )

  (when (-> *pc-settings* baby-mode?)
    ;; call post-init function
    (when (and *practice-spawn-post-init*
                *target*
                (-> *setting-control* current allow-pause)
                (>= (- (-> *display* base-frame-counter) (-> *game-info* blackout-time)) (seconds 0.1))
                )
      (*practice-spawn-post-init*)
      (set! *practice-spawn-post-init* #f)
      )

    (when (cpad-hold? 0 l2)
      ;; Check for fast reset combo
      (when (cpad-pressed? 0 up)
        (format #t "player triggered reset combo~%")
        (speedrun-practice-spawn)
        )
      
      ;; Check for temp checkpoint combo
      (when (cpad-pressed? 0 down)
        (format #t "player triggered temp checkpoint combo~%")
        (speedrun-practice-store-temp-checkpoint)
        )
      )
    )

  (none))

(defun speedrun-reset-common-settings ()
  ;; disable hints (this seems to be overriden by your slot 1 save though)
  (set! (-> *setting-control* default play-hints) #f)
  ;; ensure `force actors` is not enabled
  (set! (-> *pc-settings* force-actors?) #f)
  ;; force FPS to `60`
  (set-frame-rate! *pc-settings* 60)
  ;; skip intro cutscene
  (close-specific-task! (game-task intro) (task-status need-resolution))
  (none)
  )

(defun speedrun-start-run ()
  ;; randomize game id so the autosplitter knows to restart
  (update-autosplit-jak1-new-game)
  ;; spawn at the warp gate checkpoint
  (initialize! *game-info* 'game (the-as game-save #f) "game-start")
  (speedrun-reset-common-settings)
  ;; enable auto saving by default
  (set! (-> *setting-control* default auto-save) #t)
  (none)
  )

(define *tmp-continue-point* (new 'static 'continue-point
                             :name "tmp"
                             :level #f
                             :trans (new 'static 'vector :w 1.0)
                             :quat (new 'static 'quaternion :w 1.0)
                             :camera-trans (new 'static 'vector :w 1.0)
                             :camera-rot (new 'static 'array float 9)
                             :load-commands '()
                             :vis-nick #f
                             :lev0 #f
                             :disp0 #f
                             :lev1 #f
                             :disp1 #f
                             )
    )
(define *tmp-flut?* #f)
(define *tmp-zoomer?* #f)

(defun speedrun-practice-temp-checkpoint ()
  (when (-> *tmp-continue-point* level)
    (+! (-> *pc-settings* baby-mode-count) 1) ;; increment baby-mode-counter
    (cond
      (*tmp-flut?* (set! *practice-spawn-post-init* get-on-flutflut))
      (*tmp-zoomer?* (set! *practice-spawn-post-init* get-on-zoomer))
      (else (set! *practice-spawn-post-init* generic-post-init))
      )
    ;; commented out to prevent malding 
    ;; (if (cpad-hold? 0 r2)  ;; fully reset game if r2 held too
    ;;   (initialize! *game-info* 'game (the-as game-save #f) "default")
    ;;   )
    (when (not (string= (-> *game-info* current-continue name) "tmp"))
      (set! *last-real-continue-point* (-> *game-info* current-continue))
      )
    (set! (-> *game-info* current-continue) *tmp-continue-point*)
    (initialize! *game-info* 'dead (the-as game-save #f) (the-as string #f))
    (speedrun-reset-common-settings)
    )
  (none)
  )

(defun continue-point-copy! ((dst continue-point) (src continue-point))
  (set! (-> dst level) (-> src level))
  (set! (-> dst quat y) 0.0)
  (set! (-> dst quat w) 1.0)
  (set! (-> dst load-commands) (-> src load-commands))
  (set! (-> dst vis-nick) (-> src vis-nick))
  (when (-> *level* level0)
    (set! (-> dst lev0) (-> *level* level0 name))
    (set! (-> dst disp0) 'display)
    )
  (when (-> *level* level1)
    (set! (-> dst lev1) (-> *level* level1 name))
    (set! (-> dst disp1) 'display)
    )
  (none)
  )

(defun camera-rot-copy! ((dst continue-point) (src matrix))
  (set! (-> dst camera-rot 0) (-> src vector 0 x))
  (set! (-> dst camera-rot 1) (-> src vector 0 y))
  (set! (-> dst camera-rot 2) (-> src vector 0 z))
  (set! (-> dst camera-rot 3) (-> src vector 1 x))
  (set! (-> dst camera-rot 4) (-> src vector 1 y))
  (set! (-> dst camera-rot 5) (-> src vector 1 z))
  (set! (-> dst camera-rot 6) (-> src vector 2 x))
  (set! (-> dst camera-rot 7) (-> src vector 2 y))
  (set! (-> dst camera-rot 8) (-> src vector 2 z))
  (none)
  )

(defun speedrun-practice-store-temp-checkpoint ()
  (case (-> *target* state)
    ;; only store temp checkpoint if in one of these states
    ((target-stance target-wade-stance target-swim-stance target-flut-stance target-racing)
      ;; assume current continue is good enough for the current location
      (continue-point-copy! *tmp-continue-point* (-> *game-info* current-continue))
      (vector-copy! (-> *tmp-continue-point* trans) (-> *target* root trans))
      (quaternion-copy! (-> *tmp-continue-point* quat) (-> *target* control unknown-quaternion00))
      (vector-copy! (-> *tmp-continue-point* camera-trans) (-> *camera-combiner* trans))
      (camera-rot-copy! *tmp-continue-point* (-> *camera-combiner* inv-camera-rot))

      (set! *tmp-flut?* #f)
      (set! *tmp-zoomer?* #f)
      (case (-> *target* state)
        ((target-flut-stance)
          (set! *tmp-flut?* #t)
          )
        ((target-racing)
          (set! *tmp-zoomer?* #t)
          )
        )
      (sound-play "select-menu")
      )
    )
  (none)
  )


(defun speedrun-practice-spawn ()
  ;; enable speedrunner mode
  (set! (-> *pc-settings* speedrunner-mode?) #t)
  ;; randomize game id so the autosplitter knows to restart
  (update-autosplit-jak1-new-game)

  ;; reset any previous post-target-init callback
  (set! *practice-spawn-post-init* #f)

  (speedrun-practice-temp-checkpoint)
      
  (none)
  )