;;-*-Lisp-*-
(in-package goal)

(defmacro mod-copy-mesh-and-path (dst-name src-name)
  `(let ((dst (the nav-enemy (process-by-ename ,dst-name)))
         (src (the nav-enemy (process-by-ename ,src-name)))
         )
    (when (and src dst)
      (set! (-> dst nav mesh) (-> src nav mesh))
      (set! (-> dst path flags) (-> src path flags))
      (curve-copy! (-> dst path curve) (-> src path curve))
      (set! (-> dst path num-cverts) (-> src path num-cverts))
      (set! (-> dst path cverts) (-> src path cverts))
      )
    )
  )

(defmacro mod-no-money-bob (moneyname)
  `(begin
    (when (process-by-ename ,moneyname)
      (set! (-> (the money (process-by-ename ,moneyname)) bob-amount) 0.0)
      )
    )
  )

;; takes a path-control and xyz values to offsets every node in the path by
(defmacro shift-path! (path x y z)
  `(let ((voff (static-vector-meters ,x ,y ,z)))
    (dotimes (idx (-> ,path num-cverts))
      (vector+! (-> ,path cverts idx) (-> ,path cverts idx) voff)
      )
    )
  )

(defmacro path-print-meters (path)
  `(dotimes (idx (-> ,path num-cverts))
    (print-vector3m (-> ,path cverts idx))
    )
  )

(defmacro move-pd-str (actor-name x y z)
  `(let ((pd (the process-drawable (process-by-ename ,actor-name))))
    (when pd
      (set-vector-meters! (-> pd root trans) ,x ,y ,z)
      (when (= (-> pd type) launcher)
        (let ((lnchr (the launcher pd)))
          (set-vector-meters! (-> lnchr root-override trans) ,x ,y ,z)
          (set-vector-meters! (-> lnchr root-override root-prim world-sphere) ,x ,y ,z)
          )
        )
      )
    (none)
    )
  )

(defmacro set-pd-quat (actor-name x y z w)
  `(let ((pd (the process-drawable (process-by-ename ,actor-name))))
    (when pd
      (set-vector! (-> pd root quat) ,x ,y ,z ,w)
      )
    (none)
    )
  )

(defun override-fuel-cell-position ((arg0 entity-actor) (x float) (y float) (z float))
  ;; (format 0 "override-fuel-cell-pos for ~P~%" arg0)
  (when arg0
    (set-vector-meters! (-> arg0 extra trans) x y z)
    (set-vector-meters! (res-lump-struct arg0 'movie-pos vector :time (the-as float -1000000000.0)) x y z)
    )
  )

(defun mod-override-plat-path ((obj plat) (arg0 entity-actor))
  (case (-> obj name) :comp name=
    ;; citadel
    (('citb-launcher-4) ;; back and forth - shortcut to other side
      (set-vector-meters! (-> obj path cverts 0) 2630.9350 -23.0000 -4715.0468)
      (set-vector-meters! (-> obj path cverts 1) 2649.4807 -23.0000 -4715.1137)
      )
    (('citb-launcher-5) ;; back and forth - a little shifted from orig
      (set-vector-meters! (-> obj path cverts 0) 2542.9291 -23.0000 -4676.8666)
      (set-vector-meters! (-> obj path cverts 1) 2561.4748 -23.0000 -4676.9335)
      )
    (('citb-launcher-6) ;; back and forth - around back path
      (set-vector-meters! (-> obj path cverts 0) 2491.2736 -23.0000 -4645.1835)
      (set-vector-meters! (-> obj path cverts 1) 2502.7919 -23.0000 -4668.2158)
      )
    (('citb-launcher-7)  ;; back and forth - path along left/back
      (set-vector-meters! (-> obj path cverts 0) 2536.4462 -23.0000 -4615.3305)
      (set-vector-meters! (-> obj path cverts 1) 2525.1428 -23.0000 -4592.7045)
      ) 
    (('citb-launcher-8)   ;; back and forth - 
      (set-vector-meters! (-> obj path cverts 0) 2593.8566 -23.0000 -4778.7832)
      (set-vector-meters! (-> obj path cverts 1) 2569.5126 -23.0000 -4792.8198)
      )
    (('citb-launcher-9)   ;; back and forth - 
      (set-vector-meters! (-> obj path cverts 0) 2607.7797 -23.0000 -4683.4707)
      (set-vector-meters! (-> obj path cverts 1) 2632.1237 -23.0000 -4669.4340)
      )
    (('citb-launcher-10)  ;; circling - central, shared with citb-launcher-12
      (set-vector-meters! (-> obj path cverts 0) 2548.8154 -23.0 -4752.4008)
      (set-vector-meters! (-> obj path cverts 1) 2545.1564 -23.0 -4751.9189)
      (set-vector-meters! (-> obj path cverts 2) 2541.7468 -23.0 -4750.5068)
      (set-vector-meters! (-> obj path cverts 3) 2538.8188 -23.0 -4748.2602)
      (set-vector-meters! (-> obj path cverts 4) 2536.5722 -23.0 -4745.3320)
      (set-vector-meters! (-> obj path cverts 5) 2535.1599 -23.0 -4741.9228)
      (set-vector-meters! (-> obj path cverts 6) 2534.6782 -23.0 -4738.2636)
      (set-vector-meters! (-> obj path cverts 7) 2535.1599 -23.0 -4734.6049)
      (set-vector-meters! (-> obj path cverts 8) 2536.5722 -23.0 -4731.1953)
      (set-vector-meters! (-> obj path cverts 9) 2538.8188 -23.0 -4728.2670)
      (set-vector-meters! (-> obj path cverts 10) 2541.7468 -23.0 -4726.0205)
      (set-vector-meters! (-> obj path cverts 11) 2545.1564 -23.0 -4724.6083)
      (set-vector-meters! (-> obj path cverts 12) 2548.8154 -23.0 -4724.1264)
      (set-vector-meters! (-> obj path cverts 13) 2552.4743 -23.0 -4724.6083)
      (set-vector-meters! (-> obj path cverts 14) 2555.8837 -23.0 -4726.0205)
      (set-vector-meters! (-> obj path cverts 15) 2558.8117 -23.0 -4728.2670)
      (set-vector-meters! (-> obj path cverts 16) 2561.0583 -23.0 -4731.1953)
      (set-vector-meters! (-> obj path cverts 17) 2562.4707 -23.0 -4734.6049)
      (set-vector-meters! (-> obj path cverts 18) 2562.9523 -23.0 -4738.2636)
      (set-vector-meters! (-> obj path cverts 19) 2562.4707 -23.0 -4741.9228)
      (set-vector-meters! (-> obj path cverts 20) 2561.0583 -23.0 -4745.3320)
      (set-vector-meters! (-> obj path cverts 21) 2558.8117 -23.0 -4748.2602)
      (set-vector-meters! (-> obj path cverts 22) 2555.8837 -23.0 -4750.5068)
      (set-vector-meters! (-> obj path cverts 23) 2552.4743 -23.0 -4751.9189)
      (set-vector-meters! (-> obj path cverts 24) 2548.8154 -23.0 -4752.4008)
      )
    (('citb-launcher-11)  ;; circling - end, shared with citb-launcher-13
      (set-vector-meters! (-> obj path cverts 0)  2639.9606 -23.0000 -4822.1450)
      (set-vector-meters! (-> obj path cverts 1)  2636.3017 -23.0000 -4821.6630)
      (set-vector-meters! (-> obj path cverts 2)  2632.8923 -23.0000 -4820.2509)
      (set-vector-meters! (-> obj path cverts 3)  2629.9643 -23.0000 -4818.0039)
      (set-vector-meters! (-> obj path cverts 4)  2627.7177 -23.0000 -4815.0761)
      (set-vector-meters! (-> obj path cverts 5)  2626.3054 -23.0000 -4811.6665)
      (set-vector-meters! (-> obj path cverts 6)  2625.8237 -23.0000 -4808.0078)
      (set-vector-meters! (-> obj path cverts 7)  2626.3054 -23.0000 -4804.3486)
      (set-vector-meters! (-> obj path cverts 8)  2627.7177 -23.0000 -4800.9389)
      (set-vector-meters! (-> obj path cverts 9)  2629.9643 -23.0000 -4798.0112)
      (set-vector-meters! (-> obj path cverts 10) 2632.8923 -23.0000 -4795.7646)
      (set-vector-meters! (-> obj path cverts 11) 2636.3017 -23.0000 -4794.3525)
      (set-vector-meters! (-> obj path cverts 12) 2639.9606 -23.0000 -4793.8706)
      (set-vector-meters! (-> obj path cverts 13) 2643.6196 -23.0000 -4794.3525)
      (set-vector-meters! (-> obj path cverts 14) 2647.0292 -23.0000 -4795.7646)
      (set-vector-meters! (-> obj path cverts 15) 2649.9570 -23.0000 -4798.0112)
      (set-vector-meters! (-> obj path cverts 16) 2652.2038 -23.0000 -4800.9389)
      (set-vector-meters! (-> obj path cverts 17) 2653.6159 -23.0000 -4804.3486)
      (set-vector-meters! (-> obj path cverts 18) 2654.0979 -23.0000 -4808.0078)
      (set-vector-meters! (-> obj path cverts 19) 2653.6159 -23.0000 -4811.6665)
      (set-vector-meters! (-> obj path cverts 20) 2652.2038 -23.0000 -4815.0761)
      (set-vector-meters! (-> obj path cverts 21) 2649.9570 -23.0000 -4818.0039)
      (set-vector-meters! (-> obj path cverts 22) 2647.0292 -23.0000 -4820.2509)
      (set-vector-meters! (-> obj path cverts 23) 2643.6196 -23.0000 -4821.6630)
      (set-vector-meters! (-> obj path cverts 24) 2639.9606 -23.0000 -4822.1450)
      )
    (('citb-plat-eco-1) ;; in open space near red sage cage
      (set-vector-meters! (-> obj path cverts 0) 2844.9836 -5.0000 -4760.1435)
      (set-vector-meters! (-> obj path cverts 1) 2844.9836 -30.0000 -4760.1435)
      )
    (('citb-plat-eco-2) ;; in open space near pizzas after yellow sage cage
      (set-vector-meters! (-> obj path cverts 0) 2732.1655 -14.6321 -4730.4677)
      (set-vector-meters! (-> obj path cverts 1) 2732.1655 -24.6321 -4730.4677)
      )
    (('citb-plat-eco-3) ;; left/down after blue sage cage
      (set-vector-meters! (-> obj path cverts 0)  2781.5295 -1.7174   -4787.2226)
      (set-vector-meters! (-> obj path cverts 1)  2782.1752 -1.7856   -4786.2270)
      (set-vector-meters! (-> obj path cverts 2)  2783.4719 -1.9730   -4784.2431)
      (set-vector-meters! (-> obj path cverts 3)  2785.4340 -2.4560   -4781.3027)
      (set-vector-meters! (-> obj path cverts 4)  2787.4121 -3.2122   -4778.4296)
      (set-vector-meters! (-> obj path cverts 5)  2789.3981 -4.3440   -4775.6826)
      (set-vector-meters! (-> obj path cverts 6)  2791.3627 -5.9840   -4773.1787)
      (set-vector-meters! (-> obj path cverts 7)  2793.2453 -8.2188   -4771.0966)
      (set-vector-meters! (-> obj path cverts 8)  2794.9941 -10.9258  -4769.5449)
      (set-vector-meters! (-> obj path cverts 9)  2796.7087 -13.8021  -4768.3188)
      (set-vector-meters! (-> obj path cverts 10) 2798.5122 -16.6514  -4767.1577)
      (set-vector-meters! (-> obj path cverts 11) 2800.4543 -19.3683  -4765.9008)
      (set-vector-meters! (-> obj path cverts 12) 2802.5532 -21.8572  -4764.4340)
      (set-vector-meters! (-> obj path cverts 13) 2804.7773 -24.0736  -4762.7343)
      (set-vector-meters! (-> obj path cverts 14) 2807.0861 -26.0119  -4760.8222)
      (set-vector-meters! (-> obj path cverts 15) 2808.6569 -27.1353  -4759.4331)
      (set-vector-meters! (-> obj path cverts 16) 2809.4460 -27.6603  -4758.7158)
      )
    )
  (none)
  )

(defun mod-override-init-position ((obj process-drawable) (arg0 entity-actor))
  (mod-training-override-init-position obj arg0)
  (mod-village1-override-init-position obj arg0)
  (mod-beach-override-init-position obj arg0)
  (mod-jungle-override-init-position obj arg0)
  (mod-misty-override-init-position obj arg0)
  (mod-firecanyon-override-init-position obj arg0)
  (mod-village2-override-init-position obj arg0)
  (mod-sunken-override-init-position obj arg0)
  (mod-swamp-override-init-position obj arg0)
  (mod-rolling-override-init-position obj arg0)
  (mod-ogre-override-init-position obj arg0)
  (mod-village3-override-init-position obj arg0)
  (mod-snowy-override-init-position obj arg0)
  (mod-cave-override-init-position obj arg0)
  (mod-lavatube-override-init-position obj arg0)
  (mod-citadel-override-init-position obj arg0)
  
  (none)
  )


(define-extern aphid type)
(defun mod-override-path ((obj nav-enemy))
  (case (-> obj type)
    ((aphid)
      (set-vector-meters! (-> obj path cverts 0) 441.7 -44.0 -288.1)
      (set-vector-meters! (-> obj path cverts 1) 426.6 -44.0 -288.1)
      (set-vector-meters! (-> obj path cverts 2) 426.6 -44.0 -260.1)
      (set-vector-meters! (-> obj path cverts 3) 441.7 -44.0 -260.1)
      (vector-copy! (-> obj nav destination-pos) (-> *target* root trans))
      )
    (else
      (when #f
        (format 0 "Unhandled mod-override-path type ~A~%" (-> obj type))
        )
      )
    )
  (none)
  )

(defun mod-move-eco ((eco-name string) (vec vector))
  (let ((obj (the eco (process-by-ename eco-name))))
    ;; only move if not being suck-sucked
    (when (and obj (not (or (name= (-> obj state name) 'pickup) (name= (-> obj state name) 'notice-blue))))
      (vector-copy-no-w! (-> obj base) vec)
      (vector-copy-no-w! (-> obj root trans) vec)
      (vector-copy-no-w! (-> obj root-override trans) vec)
      (vector-copy-no-w! (-> obj root-override root-prim prim-core world-sphere) vec)

      (if (-> obj sound)
        (vector-copy-no-w! (-> obj sound trans) vec)
        )
      )
    )
  )

(defun mod-move-ecovent ((ecovent-name string) (vec vector))
  (let ((obj (the ecovent (process-by-ename ecovent-name))))
    (when obj
      (vector-copy-no-w! (-> obj root trans) vec)
      (vector-copy-no-w! (-> obj root-override trans) vec)
      (vector-copy-no-w! (-> obj root-override root-prim prim-core world-sphere) vec)
      
      (if (-> obj sound)        
        (vector-copy-no-w! (-> obj sound trans) vec)
        )
      )
    )
  )

(defun mod-run-each-frame ()
  (mod-training-run-each-frame)
  (mod-village1-run-each-frame)
  (mod-beach-run-each-frame)
  (mod-jungle-run-each-frame)
  (mod-misty-run-each-frame)
  (mod-firecanyon-run-each-frame)
  (mod-village2-run-each-frame)
  (mod-sunken-run-each-frame)
  (mod-swamp-run-each-frame)
  (mod-rolling-run-each-frame)
  (mod-ogre-run-each-frame)
  (mod-village3-run-each-frame)
  (mod-snowy-run-each-frame)
  (mod-cave-run-each-frame)
  (mod-lavatube-run-each-frame)
  (mod-citadel-run-each-frame)
  (mod-crystalcave-run-each-frame)

  (none)
  )

(defun mod-override-child-fuel-cell-movie-pos ((dst vector) (obj fuel-cell) (maybe-parent process))
  ;; (format #t "checking for override with parent ~A / grandparent ~A / maybe-parent ~A ~%"
  ;;   (-> (ppointer->process (-> obj parent)) name)
  ;;   (-> (ppointer->process (-> (ppointer->process (-> obj parent)) parent)) name)
  ;;   (-> maybe-parent name)
  ;;   )

  ;; check parent
  (case (-> (ppointer->process (-> obj parent)) name) :comp name=
    (('farmer-3) ;; inside hut
      (set-vector-meters! dst -22.16   3.75 -75.35)
      (set-vector-meters! (res-lump-struct (-> obj entity) 'movie-pos (vector) :time (the-as float -1000000000.0)) -22.16   3.75 -75.35)
      )
    (('plant-boss-3)
      ;; plant boss -> in center where eco switch usually is
      (set-vector-meters! dst 434.3 -41.0 -248.5)
      )
    (('eggtop-6)
      ;; blue-eco switch -> moved to plant boss room
      (set-vector-meters! dst 270.5 -45.0 -292.9)
      )
    (('harvester-87 'harvester-88 'harvester-89 'harvester-90 'harvester-91 'ecoventrock-3 'ecoventrock-4 'ecoventrock-5 'ecoventrock-6 'ecoventrock-7)
      ;; second pillar to cannon tower
      (set-vector-meters! dst -210.29  30.55 -355.45)
      )
    (('pelican-1)
      (cond
        ((name= (-> (the pelican (ppointer->process (-> obj parent))) state name) 'pelican-spit)
          (set-vector-meters! dst -127.78  18.60 -474.34) ;; mid waterfall
          )
        ((name= (-> (the pelican (ppointer->process (-> obj parent))) state name) 'pelican-explode)
          (set-vector-meters! dst -256.17  28.28 -465.54) ;; high plateau above grotto
          )
        (else
          (format #t "unknown pelican-1 state ~S~%" (-> (the pelican (ppointer->process (-> obj parent))) state name))
          )
        )
      )
    (('mistycannon-4 'babak-with-cannon-1)
      (set-vector-meters! dst -99.35  22.83 -307.85) ;; near cannon, below orig flutflut nest
      (set-vector-meters! (res-lump-struct (-> obj entity) 'movie-pos (vector) :time (the-as float -1000000000.0)) -99.35  22.83 -307.85)
      )
    (('mistycannon-8 'babak-with-cannon-5)
      (set-vector-meters! dst -138.39  57.04 966.67) ;; up top where logs come out
      (set-vector-meters! (res-lump-struct (-> obj entity) 'movie-pos (vector) :time (the-as float -1000000000.0)) -138.39  57.04 966.67)
      )
    (('boat-fuelcell-1 'balloonlurker-9 'balloonlurker-10 'balloonlurker-11 'balloonlurker-12 'balloonlurker-13 'balloonlurker-14)
      ;; blue eco jump from zoomer dock / just over the fence -> valid for one free zoomer OOB
      (set-vector-meters! dst -12.69  9.5 1268.28) 
      )
    (('racer-8)
      ;; up ledge from where normally is at end of FC
      (set-vector-meters! dst 326.08  33.62 -1448.86)
      )
    (('gambler-1) ;; dock towards sage hut
      (set-vector-meters! dst 319.37   5.00 -1604.09)
      (set-vector-meters! (res-lump-struct (-> obj entity) 'movie-pos (vector) :time (the-as float -1000000000.0)) 319.37   5.00 -1604.09)
      )
    (('geologist-1);; on wooden thing near orig pos
      (set-vector-meters! dst 192.10  13.71 -1615.26)
      (set-vector-meters! (res-lump-struct (-> obj entity) 'movie-pos (vector) :time (the-as float -1000000000.0)) 192.10  13.71 -1615.26)
      )
    (('warrior-1) ;; dock towards sage hut
      (set-vector-meters! dst 318.73   4.68 -1590.79)
      (set-vector-meters! (res-lump-struct (-> obj entity) 'movie-pos (vector) :time (the-as float -1000000000.0)) 318.73   4.68 -1590.79)
      )
    (('exit-chamber-1)  ;; inside elevator
      (vector-copy! dst (static-vector-meters 575.8 -246.8 -1679.49))
      )
    (('swamp-tetherrock-13)
      (vector-copy! dst (static-vector-meters 390.12  12.70 -2065.66))
      )
    (('swamp-tetherrock-14)
      (vector-copy! dst (static-vector-meters 634.70  29.61 -1956.83))
      )
    (('swamp-tetherrock-15)
      (vector-copy! dst (static-vector-meters 524.87  11.5 -1909.68))
      )
    (('swamp-tetherrock-16)
      (vector-copy! dst (static-vector-meters 369.65  10.0 -1963.15))
      )
    (('race-ring-24) ;; purple rings
      (vector-copy! dst (static-vector-meters -327.0  24.04 -1578.35))
      (set-vector-meters! (res-lump-struct (-> obj entity) 'movie-pos (vector) :time (the-as float -1000000000.0)) -327.0  24.04 -1578.35)
      )
    (('race-ring-53) ;; blue rings
      (vector-copy! dst (static-vector-meters -283.21  21.30 -1516.39))
      (set-vector-meters! (res-lump-struct (-> obj entity) 'movie-pos (vector) :time (the-as float -1000000000.0)) -283.21  21.30 -1516.39)
      )
    (('racer-15)
      ;; up ledge from where normally is at end of MP
      (set-vector-meters! dst 985.71  40.47 -3403.63)
      )
    (('ogreboss-1)
      ;; hot rock near normal spawn
      (set-vector-meters! dst 209.98  31.1 -1897.90)
      )
    (('crate-2987)
      ;; secret cell in VC, moved to redsage hut
      (set-vector-meters! dst 1107.55  53.2 -3489.15)
      )
    (('snow-eggtop-4)
      ;; yellow-eco switch -> moved to tower in fort
      (set-vector-meters! dst 836.59 255.4 -3243.90)
      )
    (('snow-switch-1)
      ;; inside fort opposite orig cell, use flutflut + blue eco to jump in
      (set-vector-meters! dst  802.36 240.65 -3275.89)
      )
    (('crate-2986)
      ;; above icy slide, spawn cell at top
      (set-vector-meters! dst 750.08 256.3 -3392.46)
      )
    (('snow-bumper-69 'snow-bumper-70 'snow-bumper-71 'snow-bumper-72 'snow-bumper-73 'snow-bumper-74 'snow-bumper-75 'snow-bumper-76 'snow-bumper-77 'snow-bumper-78 'snow-bumper-79 'snow-bumper-80 'snow-bumper-81)
      ;; platform in open center area
      (set-vector-meters! dst 887.71 210.80 -3354.91)
      )
    (('dark-crystal-1)
      ;; nearby orig yellow ecovent
      (set-vector-meters! dst 1025.73  36.4 -3152.19)
      )
    (('dark-crystal-2)
      ;; dark cave - platform with spiders before topmost
      (set-vector-meters! dst 905.56  81.4 -2956.08)
      )
    (('dark-crystal-3)
      ;; top of stalag nearby
      (set-vector-meters! dst 1167.64  16.5 -2980.29)
      )
    (('dark-crystal-4)
      ;; on spiderweb nearby in eco at bottom 
      (set-vector-meters! dst 1064.83  10.49 -3108.11)
      )
    (('dark-crystal-5)
      ;; on path towards dark cave
      (set-vector-meters! dst 981.13  38.05 -2984.19)
      )
    (('racer-36)
      ;; before last bridge to end of LT
      (set-vector-meters! dst  2568.04 -11.5 -4525.38)
      )
    (else
      ;; (format #t "fuel movie override, didnt match parent ~A ~%" (-> (ppointer->process (-> obj parent)) name))
      ;; check grandparent
      (case (-> (ppointer->process (-> (ppointer->process (-> obj parent)) parent)) name) :comp name=
        (('crate-2961 'crate-2959 'crate-2958 'crate-2957 'crate-2956 'crate-2955 'crate-2960)
          ;; geyser -> in back geyser (zoom walk from last fly)
          (set-vector-meters! dst -1110.5 13.0 1058.0)
          )
        (('crate-3142 'crate-3141 'crate-3143 'crate-3144 'crate-3147 'crate-3146 'crate-3145)
          ;; sandover -> on farmers roof
          (set-vector-meters! dst -9.0 15.0 -60.5)
          )
        (('crate-689 'crate-688 'crate-3 'crate-47 'crate-1844 'crate-58 'crate-28)
          ;; FJ -> top of tallest blue eco tower
          (set-vector-meters! dst 362.3 109.0 -275.8)
          )
        (('crate-213 'crate-646 'crate-647 'crate-648 'crate-649 'crate-651 'crate-2467)
          ;; sentinel -> orig flutflutegg nest
          (set-vector-meters! dst -56.42  42.7 -290.57)
          )
        (('crate-659 'crate-672 'crate-673 'crate-684 'crate-747 'crate-2561) ;; crate-2560 excluded because I think its set to instant collect, expected to be picked up on zoomer?
          ;; misty -> bone near arena entrance
          (set-vector-meters! dst -158.17  22.0 883.41)
          )
        (('crate-1019 'crate-1027 'crate-1028 'crate-1029 'crate-1030 'crate-1032 'crate-1033)
          ;; firecanyon -> wherever target is (zoomer)
          (vector-copy-no-w! dst (-> *target* root trans))
          )
        (('crate-3127 'crate-3128 'crate-3129 'crate-3130 'crate-3131 'crate-3132 'crate-3133)
          ;; rock village - in center, above hanging fire
          (set-vector-meters! dst 295.85  23.0 -1631.51)
          )
        (('crate-925 'crate-926 'crate-917 'crate-923)
          ;; LPC (sunken) - floating above steps in piggyback room
          (set-vector-meters! dst 614.96 -128.94 -1726.03)
          )
        (('crate-2705)
          ;; LPC (sunkenb) - floating in center of helix
          (set-vector-meters! dst 586.27 -410.48 -1787.47)
          )
        (('crate-748 'crate-762 'crate-786 'crate-787 'crate-843 'crate-849 'crate-2936)
          ;; Boggy - past second bats
          (set-vector-meters! dst 368.55   1.61 -2156.54)
          )
        (('crate-2176 'crate-2188 'crate-2187 'crate-2194 'crate-2209 'crate-2199 'crate-2289)
          ;; Basin - boosted from raised platform with hole in it 
          (set-vector-meters! dst -388.48  44.80 -1569.73)
          )
        (('crate-2430 'crate-2989 'crate-2990 'crate-2991 'crate-2992 'crate-2993 'crate-2994)
          ;; Mountain Pass - up on "OOB" ledge with trees before big jump
          (set-vector-meters! dst 30.2  46.03 -2974.5)
          )
        (('crate-3121 'crate-3123 'crate-3148)
          ;; Volcanic Crater - island before spider cave
          (set-vector-meters! dst 1135.24  44.9 -3419.32)
          ) 
        (('crate-3122 'crate-3126)
          ;; Volcanic Crater - bridge by gondola/miners
          (set-vector-meters! dst 1080.89  52.3 -3512.50)
          )
        (('crate-3124 'crate-3125)
          ;; Volcanic Crater - lava tube entrance
          (set-vector-meters! dst 1233.38  47.0 -3563.32 )
          )           
        (('crate-2685 'crate-2689 'crate-2697 'crate-3018)
          ;; maincave - on wooden structure with gnawers, mid level
          (set-vector-meters! dst 1071.87  34.9 -3103.22)
          )
        (('crate-2799)
          ;; robocave - end of spidertunnel, launcher plat
          (set-vector-meters! dst 1199.41 -24.5 -2971.85)
          )
        (('crate-2985)
          ;; robocave - under stone support
          (set-vector-meters! dst 1422.86 -22.0 -2776.55)
          )
        (('crate-3022)
          ;; darkcave - outside of water section
          (set-vector-meters! dst 865.07  48.5 -2854.20)
          )
        (('crate-975 'crate-1133)
          ;; snowy - on path to orig yellow eco switch
          (set-vector-meters! dst 686.43 220.6 -3333.60)
          )
        (('crate-976 'crate-1132)
          ;; snowy - near icy lake
          (set-vector-meters! dst 737.66 260.08 -3474.30)
          )
        (('crate-1138)
          ;; snowy - central bridge
          (set-vector-meters! dst 909.37 222.5 -3328.53)
          )
        (('crate-980 'crate-3134)
          ;; snowy - across gap near start
          (set-vector-meters! dst 963.58 240.7 -3476.45)
          )
        (('crate-3025 'crate-3026 'crate-3027 'crate-3028 'crate-3029 'crate-3117 'crate-3118)
          ;; lavatube - wherever target is (zoomer)
          (vector-copy-no-w! dst (-> *target* root trans))
          )
        (('crate-2996 'crate-2997 )
          ;; citadel - wooden plat in center of firehose room
          (set-vector-meters! dst 2733.06 -22.6 -4902.56)
          )
        (('crate-2998)
          ;; citadel - on orig eco cache start of launcher room
          (set-vector-meters! dst 2633.38 -22.0 -4615.62)
          )
        (('crate-2999 'crate-3000 'crate-3001 'crate-3002)
          ;; citadel - top of torch near start
          (set-vector-meters! dst 2826.17 -22.2 -4657.68)
          )
        (else
          ;; (format #t "fuel movie override, didnt match grandparent ~A ~%" (-> (ppointer->process (-> (ppointer->process (-> obj parent)) parent)) name))
          ;; check maybe-parent
          (case (-> maybe-parent name) :comp name=
            (('bird-lady-beach-1)
              ;; wherever player is
              (vector-copy! dst (-> *target* root trans))
              (vector-copy! (res-lump-struct (-> obj entity) 'movie-pos vector :time (the-as float -1000000000.0)) (-> *target* root trans))
              )
            (else
              (when #f
                (format #t "no movie-pos override with parent ~A / grandparent ~A / maybe-parent ~A ~%"
                  (-> (ppointer->process (-> obj parent)) name)
                  (-> (ppointer->process (-> (ppointer->process (-> obj parent)) parent)) name)
                  (-> maybe-parent name)
                  )          
                )
              )
            )
          )
        )
      )
    )
  (none)
  )

;; more for testing purposes than anything
(defun move-actor-str ((actor-name string) (x float) (y float) (z float))
  (cond 
    ((string= actor-name "target")
      (set-vector-meters! (-> *target* root trans) x y z)
      )
    ((entity-by-name actor-name)
      (let* ((entity-actor (entity-by-name actor-name))
            (actor (-> entity-actor extra process))
            )
        (when actor
          (case (-> actor type)
            ((fuel-cell)
                (set-vector! (-> entity-actor trans) (meters x) (meters y) (meters z) 1.0)
                (set-vector! (-> entity-actor extra trans) (meters x) (meters y) (meters z) 1.0)
                (set-vector! (-> (the process-drawable actor) root trans) (meters x) (meters y) (meters z) 1.0)
                (set-vector! (-> (the fuel-cell actor) base) (meters x) (meters y) (meters z) 1.0)
                (set-vector! (-> (the fuel-cell actor) root-override trans) (meters x) (meters y) (meters z) 1.0)
              (when (name= (-> (the fuel-cell actor) state name) 'wait)
                ;; only move collision when idle (messes up glowing in cutscene)
                (set! (-> (the fuel-cell actor) root-override root-prim world-sphere x) (meters x))
                (set! (-> (the fuel-cell actor) root-override root-prim world-sphere y) (meters y))
                (set! (-> (the fuel-cell actor) root-override root-prim world-sphere z) (meters z))
                )
              )
            ((orb-cache-top)
              ;; don't move while its activated (let it go up/down)
              (when (not (name= (-> (the orb-cache-top actor) state name) 'orb-cache-top-activate))
                (set-vector! (-> entity-actor trans) (meters x) (meters y) (meters z) 1.0)
                (set-vector! (-> entity-actor extra trans) (meters x) (meters y) (meters z) 1.0)
                (set-vector! (-> (the process-drawable actor) root trans) (meters x) (meters y) (meters z) 1.0)
                (set-vector! (-> (the orb-cache-top actor) basetrans) (meters x) (meters y) (meters z) 1.0)
                (set-vector! (-> (the orb-cache-top actor) root-override trans) (meters x) (meters y) (meters z) 1.0)
                (set! (-> (the orb-cache-top actor) root-override root-prim world-sphere x) (meters x))
                (set! (-> (the orb-cache-top actor) root-override root-prim world-sphere y) (meters y))
                (set! (-> (the orb-cache-top actor) root-override root-prim world-sphere z) (meters z))
                (set-vector! (-> (the orb-cache-top actor) draw origin) (meters x) (meters y) (meters z) 1.0)
                (let ((radius (-> (the process-drawable actor) draw radius))
                      (bounds (res-lump-data entity-actor 'visvol (inline-array vector)))
                      )
                  (set-vector! (-> bounds 0) (- (meters x) radius) (meters y) (- (meters z) radius) 1.0)
                  (set-vector! (-> bounds 1) (+ (meters x) radius) (meters y) (+ (meters z) radius) 1.0)
                  )
                )
              )
            ((money)
              ;; don't move orbs if being blue-eco-sucked
              (when (not (logtest? (-> (the money actor) flags) (collectable-flags suck)))
                (set-vector! (-> entity-actor trans) (meters x) (meters y) (meters z) 1.0)
                (set-vector! (-> entity-actor extra trans) (meters x) (meters y) (meters z) 1.0)
                (set-vector! (-> (the process-drawable actor) root trans) (meters x) (meters y) (meters z) 1.0)
                (set-vector! (-> (the money actor) base) (meters x) (meters y) (meters z) 1.0)
                (set-vector! (-> (the money actor) root-override trans) (meters x) (meters y) (meters z) 1.0)
                (set! (-> (the money actor) root-override root-prim world-sphere x) (meters x))
                (set! (-> (the money actor) root-override root-prim world-sphere y) (meters y))
                (set! (-> (the money actor) root-override root-prim world-sphere z) (meters z))
                )
              )
            ((crate crate-buzzer)
              ;; only move crates if they're not jumping
              (when (= (-> (the crate actor) smush amp) 0.0)
                (set-vector! (-> entity-actor trans) (meters x) (meters y) (meters z) 1.0)
                (set-vector! (-> entity-actor extra trans) (meters x) (meters y) (meters z) 1.0)
                (set-vector! (-> (the process-drawable actor) root trans) (meters x) (meters y) (meters z) 1.0)
                (set-vector! (-> (the crate actor) base) (meters x) (meters y) (meters z) 1.0)
                (set-vector! (-> (the crate actor) root-override trans) (meters x) (meters y) (meters z) 1.0)
                (set! (-> (the crate actor) root-override root-prim world-sphere x) (meters x))
                (set! (-> (the crate actor) root-override root-prim world-sphere y) (meters y))
                (set! (-> (the crate actor) root-override root-prim world-sphere z) (meters z))
                )
              )
            (else
              (format 0 "unexpected actor type ~S ~S ~S~%" actor-name (-> entity-actor type) (-> actor type))
              (set-vector! (-> entity-actor trans) (meters x) (meters y) (meters z) 1.0)
              (set-vector! (-> entity-actor extra trans) (meters x) (meters y) (meters z) 1.0)
              ;; (set-vector! (-> (the process-drawable actor) root trans) (meters x) (meters y) (meters z) 1.0)
              )
            )
          )
        )
      )
    )
  (none)
  )

;; prints the position (root trans) of a process-drawable
(defmacro pd-pos-m (procname)
  `(let* ((obj (the process-drawable (process-by-ename ,procname)))
          (vec (-> obj root trans)))
    (format 0 "~m ~m ~m~%" (-> vec x) (-> vec y) (-> vec z) 4096.0)
    (none)
    )
  )